                        adminState.updateCBTExercise(
                          exercise.copyWith(difficulty: value),
                        );
                      }
                    },
                  ),
                ),
                
                const SizedBox(width: 16),
                
                Expanded(
                  child: TextFormField(
                    initialValue: exercise.estimatedDuration.toString(),
                    decoration: const InputDecoration(
                      labelText: 'Estimated Duration (minutes)',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                    onChanged: (value) {
                      final duration = int.tryParse(value) ?? 5;
                      adminState.updateCBTExercise(
                        exercise.copyWith(estimatedDuration: duration),
                      );
                    },
                  ),
                ),
                
                const SizedBox(width: 16),
                
                Expanded(
                  child: DropdownButtonFormField<String>(
                    value: exercise.targetSkill,
                    decoration: const InputDecoration(
                      labelText: 'Target Skill',
                      border: OutlineInputBorder(),
                    ),
                    items: const [
                      DropdownMenuItem(value: 'cognitive_restructuring', child: Text('Cognitive Restructuring')),
                      DropdownMenuItem(value: 'self_awareness', child: Text('Self-Awareness')),
                      DropdownMenuItem(value: 'perspective_taking', child: Text('Perspective Taking')),
                      DropdownMenuItem(value: 'self_compassion', child: Text('Self-Compassion')),
                      DropdownMenuItem(value: 'resilience', child: Text('Resilience Building')),
                    ],
                    onChanged: (value) {
                      if (value != null) {
                        adminState.updateCBTExercise(
                          exercise.copyWith(targetSkill: value),
                        );
                      }
                    },
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildInstructionsTab(CBTExercise exercise, AdminState adminState) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Exercise Instructions',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          
          const SizedBox(height: 8),
          
          const Text(
            'Provide clear instructions that explain the purpose of the exercise and how to complete it.',
            style: TextStyle(color: Colors.grey),
          ),
          
          const SizedBox(height: 16),
          
          Expanded(
            child: Card(
              elevation: 2,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Introduction Text
                    TextFormField(
                      initialValue: exercise.introduction,
                      maxLines: 5,
                      decoration: const InputDecoration(
                        labelText: 'Introduction',
                        hintText: 'Introduce the exercise and its benefits...',
                        border: OutlineInputBorder(),
                      ),
                      onChanged: (value) {
                        adminState.updateCBTExercise(
                          exercise.copyWith(introduction: value),
                        );
                      },
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // Step-by-step instructions
                    const Text(
                      'Step-by-Step Instructions',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    
                    const SizedBox(height: 8),
                    
                    Expanded(
                      child: ListView.builder(
                        itemCount: exercise.instructions.length + 1, // +1 for add button
                        itemBuilder: (context, index) {
                          if (index == exercise.instructions.length) {
                            // Add instruction button
                            return ElevatedButton.icon(
                              icon: const Icon(Icons.add),
                              label: const Text('Add Instruction Step'),
                              onPressed: () {
                                final updatedInstructions = List<String>.from(exercise.instructions)
                                  ..add('');
                                adminState.updateCBTExercise(
                                  exercise.copyWith(instructions: updatedInstructions),
                                );
                              },
                            );
                          }
                          
                          // Instruction step with number
                          return Padding(
                            padding: const EdgeInsets.only(bottom: 8.0),
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                // Step number
                                Container(
                                  width: 32,
                                  height: 32,
                                  margin: const EdgeInsets.only(right: 8.0, top: 8.0),
                                  decoration: BoxDecoration(
                                    color: Theme.of(context).primaryColor,
                                    shape: BoxShape.circle,
                                  ),
                                  child: Center(
                                    child: Text(
                                      '${index + 1}',
                                      style: const TextStyle(
                                        color: Colors.white,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ),
                                
                                // Instruction text field
                                Expanded(
                                  child: TextFormField(
                                    initialValue: exercise.instructions[index],
                                    maxLines: 2,
                                    decoration: const InputDecoration(
                                      hintText: 'Enter instruction step...',
                                      border: OutlineInputBorder(),
                                    ),
                                    onChanged: (value) {
                                      final updatedInstructions = List<String>.from(exercise.instructions);
                                      updatedInstructions[index] = value;
                                      adminState.updateCBTExercise(
                                        exercise.copyWith(instructions: updatedInstructions),
                                      );
                                    },
                                  ),
                                ),
                                
                                // Delete button
                                IconButton(
                                  icon: const Icon(Icons.delete, color: Colors.red),
                                  onPressed: () {
                                    final updatedInstructions = List<String>.from(exercise.instructions);
                                    updatedInstructions.removeAt(index);
                                    adminState.updateCBTExercise(
                                      exercise.copyWith(instructions: updatedInstructions),
                                    );
                                  },
                                ),
                              ],
                            ),
                          );
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildContentTab(CBTExercise exercise, AdminState adminState) {
    // Different content editor based on exercise type
    Widget contentEditor;
    
    switch (exercise.exerciseType) {
      case CBTExerciseType.innerCriticCut:
        contentEditor = _buildInnerCriticCutEditor(exercise, adminState);
        break;
      case CBTExerciseType.recastingCall:
        contentEditor = _buildRecastingCallEditor(exercise, adminState);
        break;
      case CBTExerciseType.realityVsEffects:
        contentEditor = _buildRealityVsEffectsEditor(exercise, adminState);
        break;
      case CBTExerciseType.directorsCommentary:
        contentEditor = _buildDirectorsCommentaryEditor(exercise, adminState);
        break;
      case CBTExerciseType.heroJourney:
        contentEditor = _buildHeroJourneyEditor(exercise, adminState);
        break;
    }
    
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '${_getExerciseTypeDisplayName(exercise.exerciseType)} Content',
            style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          
          const SizedBox(height: 8),
          
          Text(
            _getExerciseTypeDescription(exercise.exerciseType),
            style: const TextStyle(color: Colors.grey),
          ),
          
          const SizedBox(height: 16),
          
          Expanded(child: contentEditor),
        ],
      ),
    );
  }
  
  Widget _buildInnerCriticCutEditor(CBTExercise exercise, AdminState adminState) {
    // Get inner critic content
    final content = exercise.content;
    final Map<String, List<String>> filmGenres = {};
    
    // Initialize film genres if needed
    if (content.isEmpty) {
      filmGenres['horror'] = [];
      filmGenres['documentary'] = [];
      filmGenres['comedy'] = [];
    } else {
      filmGenres.addAll(Map<String, List<String>>.from(content));
    }
    
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Film Genre Perspectives',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            
            const SizedBox(height: 8),
            
            const Text(
              'Add negative self-talk examples for each film genre. The user will identify their inner critic voice by choosing a film genre that matches their thinking style.',
            ),
            
            const SizedBox(height: 16),
            
            // Genre tabs
            DefaultTabController(
              length: 3,
              child: Expanded(
                child: Column(
                  children: [
                    const TabBar(
                      labelColor: Colors.black,
                      tabs: [
                        Tab(text: 'Horror', icon: Icon(Icons.sentiment_very_dissatisfied)),
                        Tab(text: 'Documentary', icon: Icon(Icons.movie)),
                        Tab(text: 'Comedy', icon: Icon(Icons.sentiment_very_satisfied)),
                      ],
                    ),
                    
                    Expanded(
                      child: TabBarView(
                        children: [
                          // Horror examples
                          _buildGenreContentEditor(
                            'horror',
                            'Horror Film Perspective',
                            'Examples of catastrophizing and worst-case scenario thinking',
                            filmGenres['horror'] ?? [],
                            adminState,
                            exercise,
                          ),
                          
                          // Documentary examples
                          _buildGenreContentEditor(
                            'documentary',
                            'Documentary Film Perspective',
                            'Examples of overly analytical and judgmental thinking',
                            filmGenres['documentary'] ?? [],
                            adminState,
                            exercise,
                          ),
                          
                          // Comedy examples
                          _buildGenreContentEditor(
                            'comedy',
                            'Comedy Film Perspective',
                            'Examples of self-deprecating and ridiculous thinking',
                            filmGenres['comedy'] ?? [],
                            adminState,
                            exercise,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildGenreContentEditor(
    String genreKey, 
    String title, 
    String description, 
    List<String> examples, 
    AdminState adminState, 
    CBTExercise exercise,
  ) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          
          const SizedBox(height: 4),
          
          Text(
            description,
            style: const TextStyle(color: Colors.grey),
          ),
          
          const SizedBox(height: 16),
          
          Expanded(
            child: ListView.builder(
              itemCount: examples.length + 1, // +1 for add button
              itemBuilder: (context, index) {
                if (index == examples.length) {
                  // Add example button
                  return ElevatedButton.icon(
                    icon: const Icon(Icons.add),
                    label: const Text('Add Example'),
                    onPressed: () {
                      final updatedExamples = List<String>.from(examples)..add('');
                      final updatedContent = Map<String, dynamic>.from(exercise.content ?? {});
                      updatedContent[genreKey] = updatedExamples;
                      
                      adminState.updateCBTExercise(
                        exercise.copyWith(content: updatedContent),
                      );
                    },
                  );
                }
                
                // Example text field
                return Padding(
                  padding: const EdgeInsets.only(bottom: 8.0),
                  child: Row(
                    children: [
                      Expanded(
                        child: TextFormField(
                          initialValue: examples[index],
                          maxLines: 2,
                          decoration: const InputDecoration(
                            hintText: 'Enter a negative self-talk example...',
                            border: OutlineInputBorder(),
                          ),
                          onChanged: (value) {
                            final updatedExamples = List<String>.from(examples);
                            updatedExamples[index] = value;
                            
                            final updatedContent = Map<String, dynamic>.from(exercise.content ?? {});
                            updatedContent[genreKey] = updatedExamples;
                            
                            adminState.updateCBTExercise(
                              exercise.copyWith(content: updatedContent),
                            );
                          },
                        ),
                      ),
                      
                      IconButton(
                        icon: const Icon(Icons.delete, color: Colors.red),
                        onPressed: () {
                          final updatedExamples = List<String>.from(examples);
                          updatedExamples.removeAt(index);
                          
                          final updatedContent = Map<String, dynamic>.from(exercise.content ?? {});
                          updatedContent[genreKey] = updatedExamples;
                          
                          adminState.updateCBTExercise(
                            exercise.copyWith(content: updatedContent),
                          );
                        },
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
  
  // Additional exercise type editors would be implemented here
  Widget _buildRecastingCallEditor(CBTExercise exercise, AdminState adminState) {
    // Placeholder for Recasting Call editor
    return const Center(child: Text('Recasting Call editor would be implemented here'));
  }
  
  Widget _buildRealityVsEffectsEditor(CBTExercise exercise, AdminState adminState) {
    // Placeholder for Reality vs. Special Effects editor
    return const Center(child: Text('Reality vs. Special Effects editor would be implemented here'));
  }
  
  Widget _buildDirectorsCommentaryEditor(CBTExercise exercise, AdminState adminState) {
    // Placeholder for Director's Commentary editor
    return const Center(child: Text('Director\'s Commentary editor would be implemented here'));
  }
  
  Widget _buildHeroJourneyEditor(CBTExercise exercise, AdminState adminState) {
    // Placeholder for Hero's Journey editor
    return const Center(child: Text('Hero\'s Journey editor would be implemented here'));
  }
  
  Widget _buildFeedbackTab(CBTExercise exercise, AdminState adminState) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Feedback Messages',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          
          const SizedBox(height: 8),
          
          const Text(
            'Configure feedback messages that will be shown to users based on their responses.',
            style: TextStyle(color: Colors.grey),
          ),
          
          const SizedBox(height: 16),
          
          Expanded(
            child: Card(
              elevation: 2,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Success feedback
                    const Text(
                      'Success Messages',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    
                    const SizedBox(height: 8),
                    
                    _buildFeedbackMessagesList(
                      exercise.feedbackMessages['success'] ?? [],
                      'success',
                      'Shown when user completes the exercise successfully',
                      adminState,
                      exercise,
                    ),
                    
                    const SizedBox(height: 24),
                    
                    // Neutral feedback
                    const Text(
                      'Neutral Messages',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    
                    const SizedBox(height: 8),
                    
                    _buildFeedbackMessagesList(
                      exercise.feedbackMessages['neutral'] ?? [],
                      'neutral',
                      'Shown when user completes some but not all of the exercise',
                      adminState,
                      exercise,
                    ),
                    
                    const SizedBox(height: 24),
                    
                    // Try again feedback
                    const Text(
                      'Try Again Messages',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    
                    const SizedBox(height: 8),
                    
                    _buildFeedbackMessagesList(
                      exercise.feedbackMessages['try_again'] ?? [],
                      'try_again',
                      'Shown when user needs to retry the exercise',
                      adminState,
                      exercise,
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildFeedbackMessagesList(
    List<String> messages,
    String messageType,
    String description,
    AdminState adminState,
    CBTExercise exercise,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          description,
          style: const TextStyle(color: Colors.grey, fontSize: 12),
        ),
        
        const SizedBox(height: 8),
        
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: messages.length + 1, // +1 for add button
          itemBuilder: (context, index) {
            if (index == messages.length) {
              // Add message button
              return TextButton.icon(
                icon: const Icon(Icons.add),
                label: const Text('Add Message'),
                onPressed: () {
                  final updatedMessages = List<String>.from(messages)..add('');
                  final updatedFeedback = Map<String, dynamic>.from(exercise.feedbackMessages);
                  updatedFeedback[messageType] = updatedMessages;
                  
                  adminState.updateCBTExercise(
                    exercise.copyWith(feedbackMessages: updatedFeedback),
                  );
                },
              );
            }
            
            // Message text field
            return Padding(
              padding: const EdgeInsets.only(bottom: 8.0),
              child: Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      initialValue: messages[index],
                      decoration: const InputDecoration(
                        border: OutlineInputBorder(),
                        hintText: 'Enter feedback message...',
                      ),
                      onChanged: (value) {
                        final updatedMessages = List<String>.from(messages);
                        updatedMessages[index] = value;
                        
                        final updatedFeedback = Map<String, dynamic>.from(exercise.feedbackMessages);
                        updatedFeedback[messageType] = updatedMessages;
                        
                        adminState.updateCBTExercise(
                          exercise.copyWith(feedbackMessages: updatedFeedback),
                        );
                      },
                    ),
                  ),
                  
                  IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () {
                      final updatedMessages = List<String>.from(messages);
                      updatedMessages.removeAt(index);
                      
                      final updatedFeedback = Map<String, dynamic>.from(exercise.feedbackMessages);
                      updatedFeedback[messageType] = updatedMessages;
                      
                      adminState.updateCBTExercise(
                        exercise.copyWith(feedbackMessages: updatedFeedback),
                      );
                    },
                  ),
                ],
              ),
            );
          },
        ),
      ],
    );
  }
  
  Widget _buildAppearanceTab(CBTExercise exercise, AdminState adminState) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Visual Appearance',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          
          const SizedBox(height: 8),
          
          const Text(
            'Configure the visual style and theme of the exercise.',
            style: TextStyle(color: Colors.grey),
          ),
          
          const SizedBox(height: 16),
          
          Expanded(
            child: Card(
              elevation: 2,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Theme selection
                    const Text(
                      'Exercise Theme',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    
                    const SizedBox(height: 16),
                    
                    Row(
                      children: [
                        Expanded(
                          child: DropdownButtonFormField<String>(
                            value: exercise.appearance['theme'] as String? ?? 'cinema',
                            decoration: const InputDecoration(
                              labelText: 'Visual Theme',
                              border: OutlineInputBorder(),
                            ),
                            items: const [
                              DropdownMenuItem(value: 'cinema', child: Text('Cinema/Film')),
                              DropdownMenuItem(value: 'studio', child: Text('Studio')),
                              DropdownMenuItem(value: 'theater', child: Text('Theater')),
                              DropdownMenuItem(value: 'minimal', child: Text('Minimal')),
                              DropdownMenuItem(value: 'colorful', child: Text('Colorful')),
                            ],
                            onChanged: (value) {
                              if (value != null) {
                                final updatedAppearance = Map<String, dynamic>.from(exercise.appearance);
                                updatedAppearance['theme'] = value;
                                
                                adminState.updateCBTExercise(
                                  exercise.copyWith(appearance: updatedAppearance),
                                );
                              }
                            },
                          ),
                        ),
                        
                        const SizedBox(width: 16),
                        
                        Expanded(
                          child: DropdownButtonFormField<String>(
                            value: exercise.appearance['animationLevel'] as String? ?? 'medium',
                            decoration: const InputDecoration(
                              labelText: 'Animation Level',
                              border: OutlineInputBorder(),
                            ),
                            items: const [
                              DropdownMenuItem(value: 'none', child: Text('None')),
                              DropdownMenuItem(value: 'low', child: Text('Low')),
                              DropdownMenuItem(value: 'medium', child: Text('Medium')),
                              DropdownMenuItem(value: 'high', child: Text('High')),
                            ],
                            onChanged: (value) {
                              if (value != null) {
                                final updatedAppearance = Map<String, dynamic>.from(exercise.appearance);
                                updatedAppearance['animationLevel'] = value;
                                
                                adminState.updateCBTExercise(
                                  exercise.copyWith(appearance: updatedAppearance),
                                );
                              }
                            },
                          ),
                        ),
                      ],
                    ),
                    
                    const SizedBox(height: 24),
                    
                    // Color selection
                    const Text(
                      'Color Scheme',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    
                    const SizedBox(height: 16),
                    
                    Row(
                      children: [
                        _buildColorPicker(
                          'Primary Color',
                          exercise.appearance['primaryColor'] as String? ?? '#3F51B5',
                          (color) {
                            final updatedAppearance = Map<String, dynamic>.from(exercise.appearance);
                            updatedAppearance['primaryColor'] = color;
                            
                            adminState.updateCBTExercise(
                              exercise.copyWith(appearance: updatedAppearance),
                            );
                          },
                        ),
                        
                        const SizedBox(width: 16),
                        
                        _buildColorPicker(
                          'Secondary Color',
                          exercise.appearance['secondaryColor'] as String? ?? '#FFC107',
                          (color) {
                            final updatedAppearance = Map<String, dynamic>.from(exercise.appearance);
                            updatedAppearance['secondaryColor'] = color;
                            
                            adminState.updateCBTExercise(
                              exercise.copyWith(appearance: updatedAppearance),
                            );
                          },
                        ),
                        
                        const SizedBox(width: 16),
                        
                        _buildColorPicker(
                          'Background Color',
                          exercise.appearance['backgroundColor'] as String? ?? '#FFFFFF',
                          (color) {
                            final updatedAppearance = Map<String, dynamic>.from(exercise.appearance);
                            updatedAppearance['backgroundColor'] = color;
                            
                            adminState.updateCBTExercise(
                              exercise.copyWith(appearance: updatedAppearance),
                            );
                          },
                        ),
                      ],
                    ),
                    
                    const SizedBox(height: 24),
                    
                    // Background image selection
                    const Text(
                      'Background Image',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                    
                    const SizedBox(height: 16),
                    
                    Row(
                      children: [
                        Expanded(
                          child: DropdownButtonFormField<String>(
                            value: exercise.appearance['backgroundImage'] as String? ?? 'none',
                            decoration: const InputDecoration(
                              labelText: 'Background Image',
                              border: OutlineInputBorder(),
                            ),
                            items: const [
                              DropdownMenuItem(value: 'none', child: Text('None')),
                              DropdownMenuItem(value: 'film_studio.png', child: Text('Film Studio')),
                              DropdownMenuItem(value: 'theater.png', child: Text('Theater')),
                              DropdownMenuItem(value: 'cinema.png', child: Text('Cinema')),
                              DropdownMenuItem(value: 'film_reel.png', child: Text('Film Reel')),
                              DropdownMenuItem(value: 'custom', child: Text('Custom...')),
                            ],
                            onChanged: (value) {
                              if (value != null) {
                                final updatedAppearance = Map<String, dynamic>.from(exercise.appearance);
                                updatedAppearance['backgroundImage'] = value;
                                
                                adminState.updateCBTExercise(
                                  exercise.copyWith(appearance: updatedAppearance),
                                );
                              }
                            },
                          ),
                        ),
                        
                        const SizedBox(width: 16),
                        
                        ElevatedButton.icon(
                          icon: const Icon(Icons.upload_file),
                          label: const Text('Upload Custom'),
                          onPressed: () {
                            // This would open a file picker in the real implementation
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text('File upload would be implemented here'),
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildColorPicker(
    String label, 
    String colorHex, 
    Function(String) onColorChanged,
  ) {
    // This is a simplified color picker
    // In a real implementation, you would use a proper color picker widget
    
    // Parse the hex color
    final color = Color(int.parse(colorHex.substring(1), radix: 16) + 0xFF000000);
    
    return Expanded(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(label),
          
          const SizedBox(height: 8),
          
          InkWell(
            onTap: () {
              // Show a dialog with color options
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: Text('Choose $label'),
                  content: SingleChildScrollView(
                    child: Wrap(
                      spacing: 8,
                      runSpacing: 8,
                      children: [
                        '#3F51B5', '#2196F3', '#009688', '#4CAF50', 
                        '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107',
                        '#FF9800', '#FF5722', '#795548', '#9E9E9E',
                      ].map((hexColor) {
                        return InkWell(
                          onTap: () {
                            onColorChanged(hexColor);
                            Navigator.of(context).pop();
                          },
                          child: Container(
                            width: 40,
                            height: 40,
                            decoration: BoxDecoration(
                              color: Color(int.parse(hexColor.substring(1), radix: 16) + 0xFF000000),
                              border: Border.all(
                                color: Colors.grey,
                                width: hexColor == colorHex ? 3 : 1,
                              ),
                              borderRadius: BorderRadius.circular(4),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(),
                      child: const Text('Cancel'),
                    ),
                  ],
                ),
              );
            },
            child: Container(
              width: double.infinity,
              height: 40,
              decoration: BoxDecoration(
                color: color,
                border: Border.all(color: Colors.grey),
                borderRadius: BorderRadius.circular(4),
              ),
              child: Center(
                child: Text(
                  colorHex,
                  style: TextStyle(
                    color: color.computeLuminance() > 0.5 ? Colors.black : Colors.white,
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildPreviewTab(CBTExercise exercise) {
    // Get theme colors
    final primaryColorHex = exercise.appearance['primaryColor'] as String? ?? '#3F51B5';
    final secondaryColorHex = exercise.appearance['secondaryColor'] as String? ?? '#FFC107';
    final backgroundColorHex = exercise.appearance['backgroundColor'] as String? ?? '#FFFFFF';
    
    final primaryColor = Color(int.parse(primaryColorHex.substring(1), radix: 16) + 0xFF000000);
    final secondaryColor = Color(int.parse(secondaryColorHex.substring(1), radix: 16) + 0xFF000000);
    final backgroundColor = Color(int.parse(backgroundColorHex.substring(1), radix: 16) + 0xFF000000);
    
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Exercise Preview',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          
          const SizedBox(height: 8),
          
          const Text(
            'This is how your exercise will appear to users.',
            style: TextStyle(color: Colors.grey),
          ),
          
          const SizedBox(height: 16),
          
          Expanded(
            child: Card(
              elevation: 4,
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: backgroundColor,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Exercise header
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: primaryColor,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Row(
                        children: [
                          Icon(
                            _getExerciseTypeIcon(exercise.exerciseType),
                            color: Colors.white,
                            size: 36,
                          ),
                          
                          const SizedBox(width: 16),
                          
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  exercise.title,
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 24,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                
                                const SizedBox(height: 4),
                                
                                Text(
                                  exercise.description,
                                  style: const TextStyle(
                                    color: Colors.white70,
                                    fontSize: 14,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                    
                    const SizedBox(height: 24),
                    
                    // Exercise introduction
                    Text(
                      exercise.introduction,
                      style: TextStyle(
                        fontSize: 16,
                        height: 1.5,
                        color: primaryColor.computeLuminance() > 0.5 ? Colors.black87 : Colors.black,
                      ),
                    ),
                    
                    const SizedBox(height: 24),
                    
                    // Exercise content preview based on type
                    Expanded(
                      child: _buildExerciseContentPreview(exercise, primaryColor, secondaryColor),
                    ),
                    
                    // Navigation buttons
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        OutlinedButton(
                          onPressed: () {},
                          style: OutlinedButton.styleFrom(
                            foregroundColor: primaryColor,
                          ),
                          child: const Text('Back'),
                        ),
                        
                        const SizedBox(width: 16),
                        
                        ElevatedButton(
                          onPressed: () {},
                          style: ElevatedButton.styleFrom(
                            backgroundColor: secondaryColor,
                            foregroundColor: secondaryColor.computeLuminance() > 0.5 ? Colors.black : Colors.white,
                          ),
                          child: const Text('Next'),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildExerciseContentPreview(
    CBTExercise exercise,
    Color primaryColor,
    Color secondaryColor,
  ) {
    // Different preview based on exercise type
    switch (exercise.exerciseType) {
      case CBTExerciseType.innerCriticCut:
        return _buildInnerCriticCutPreview(exercise, primaryColor, secondaryColor);
      case CBTExerciseType.recastingCall:
        return Center(
          child: Text(
            'Recasting Call Exercise Preview',
            style: TextStyle(color: primaryColor),
          ),
        );
      case CBTExerciseType.realityVsEffects:
        return Center(
          child: Text(
            'Reality vs. Special Effects Exercise Preview',
            style: TextStyle(color: primaryColor),
          ),
        );
      case CBTExerciseType.directorsCommentary:
        return Center(
          child: Text(
            'Director\'s Commentary Exercise Preview',
            style: TextStyle(color: primaryColor),
          ),
        );
      case CBTExerciseType.heroJourney:
        return Center(
          child: Text(
            'Hero\'s Journey Exercise Preview',
            style: TextStyle(color: primaryColor),
          ),
        );
    }
  }
  
  Widget _buildInnerCriticCutPreview(
    CBTExercise exercise,
    Color primaryColor,
    Color secondaryColor,
  ) {
    // Get film genre examples
    final filmGenres = exercise.content;
    final horrorExamples = filmGenres['horror'] as List<String>? ?? [];
    final documentaryExamples = filmGenres['documentary'] as List<String>? ?? [];
    final comedyExamples = filmGenres['comedy'] as List<String>? ?? [];
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Which film genre does your inner critic sound like?',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        
        const SizedBox(height: 24),
        
        Expanded(
          child: Row(
            children: [
              // Horror genre card
              Expanded(
                child: Card(
                  color: Colors.red.shade100,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        const Icon(Icons.sentiment_very_dissatisfied, size: 40, color: Colors.red),
                        const SizedBox(height: 8),
                        const Text(
                          'Horror',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 16),
                        Expanded(
                          child: ListView.builder(
                            itemCount: horrorExamples.length.clamp(0, 3),
                            itemBuilder: (context, index) {
                              return Padding(
                                padding: const EdgeInsets.only(bottom: 8),
                                child: Text(
                                  '"${horrorExamples[index]}"',
                                  style: const TextStyle(
                                    fontStyle: FontStyle.italic,
                                    color: Colors.red,
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              
              const SizedBox(width: 8),
              
              // Documentary genre card
              Expanded(
                child: Card(
                  color: Colors.blue.shade100,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        const Icon(Icons.movie, size: 40, color: Colors.blue),
                        const SizedBox(height: 8),
                        const Text(
                          'Documentary',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 16),
                        Expanded(
                          child: ListView.builder(
                            itemCount: documentaryExamples.length.clamp(0, 3),
                            itemBuilder: (context, index) {
                              return Padding(
                                padding: const EdgeInsets.only(bottom: 8),
                                child: Text(
                                  '"${documentaryExamples[index]}"',
                                  style: const TextStyle(
                                    fontStyle: FontStyle.italic,
                                    color: Colors.blue,
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              
              const SizedBox(width: 8),
              
              // Comedy genre card
              Expanded(
                child: Card(
                  color: Colors.yellow.shade100,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        const Icon(Icons.sentiment_very_satisfied, size: 40, color: Colors.amber),
                        const SizedBox(height: 8),
                        const Text(
                          'Comedy',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 16),
                        Expanded(
                          child: ListView.builder(
                            itemCount: comedyExamples.length.clamp(0, 3),
                            itemBuilder: (context, index) {
                              return Padding(
                                padding: const EdgeInsets.only(bottom: 8),
                                child: Text(
                                  '"${comedyExamples[index]}"',
                                  style: const TextStyle(
                                    fontStyle: FontStyle.italic,
                                    color: Colors.amber,
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
  
  // Helper methods for exercise type information
  String _getExerciseTypeDisplayName(CBTExerciseType type) {
    switch (type) {
      case CBTExerciseType.innerCriticCut:
        return 'Inner Critic Cut';
      case CBTExerciseType.recastingCall:
        return 'Recasting Call';
      case CBTExerciseType.realityVsEffects:
        return 'Reality vs. Special Effects';
      case CBTExerciseType.directorsCommentary:
        return 'Director\'s Commentary';
      case CBTExerciseType.heroJourney:
        return 'Hero\'s Journey';
    }
  }
  
  String _getExerciseTypeDescription(CBTExerciseType type) {
    switch (type) {
      case CBTExerciseType.innerCriticCut:
        return 'Users identify their inner critic\'s voice by choosing a film genre, helping them recognize that negative self-talk is just one perspective.';
      case CBTExerciseType.recastingCall:
        return 'Users explore new roles they can play in social situations instead of defaulting to unhelpful patterns.';
      case CBTExerciseType.realityVsEffects:
        return 'Users sort statements into "Facts" vs. "Special Effects" (interpretations) to recognize when their minds are adding unhelpful assumptions.';
      case CBTExerciseType.directorsCommentary:
        return 'Users practice different ways to comment on personal failures - from harsh criticism to compassionate self-talk to growth-oriented perspective.';
      case CBTExerciseType.heroJourney:
        return 'Users map their personal challenges to the classic hero\'s journey structure, helping them see obstacles as natural parts of their growth story.';
    }
  }
  
  IconData _getExerciseTypeIcon(CBTExerciseType type) {
    switch (type) {
      case CBTExerciseType.innerCriticCut:
        return Icons.cut;
      case CBTExerciseType.recastingCall:
        return Icons.people;
      case CBTExerciseType.realityVsEffects:
        return Icons.filter;
      case CBTExerciseType.directorsCommentary:
        return Icons.comment;
      case CBTExerciseType.heroJourney:
        return Icons.route;
    }
  }
}import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:uuid/uuid.dart';
import '../models/cbt_exercise.dart';
import '../models/admin_state.dart';

class CBTExerciseCreator extends StatefulWidget {
  const CBTExerciseCreator({Key? key}) : super(key: key);

  @override
  _CBTExerciseCreatorState createState() => _CBTExerciseCreatorState();
}

class _CBTExerciseCreatorState extends State<CBTExerciseCreator> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final Uuid _uuid = const Uuid();
  
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 5, vsync: this);
    
    // Initialize with default CBT exercise if needed
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final adminState = Provider.of<AdminState>(context, listen: false);
      if (adminState.cbtExercise == null) {
        adminState.initializeCBTExercise(CBTExerciseType.innerCriticCut);
      }
    });
  }
  
  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }
  
  @override
  Widget build(BuildContext context) {
    return Consumer<AdminState>(
      builder: (context, adminState, _) {
        final cbtExercise = adminState.cbtExercise;
        
        if (cbtExercise == null) {
          return const Center(child: CircularProgressIndicator());
        }
        
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header with exercise type selection
            _buildHeader(cbtExercise, adminState),
            
            const SizedBox(height: 16),
            
            // Tab bar for configuration sections
            TabBar(
              controller: _tabController,
              labelColor: Theme.of(context).primaryColor,
              tabs: const [
                Tab(text: 'Instructions', icon: Icon(Icons.info_outline)),
                Tab(text: 'Content', icon: Icon(Icons.format_list_bulleted)),
                Tab(text: 'Feedback', icon: Icon(Icons.comment)),
                Tab(text: 'Appearance', icon: Icon(Icons.color_lens)),
                Tab(text: 'Preview', icon: Icon(Icons.visibility)),
              ],
            ),
            
            // Tab content
            Expanded(
              child: TabBarView(
                controller: _tabController,
                children: [
                  _buildInstructionsTab(cbtExercise, adminState),
                  _buildContentTab(cbtExercise, adminState),
                  _buildFeedbackTab(cbtExercise, adminState),
                  _buildAppearanceTab(cbtExercise, adminState),
                  _buildPreviewTab(cbtExercise),
                ],
              ),
            ),
          ],
        );
      },
    );
  }
  
  Widget _buildHeader(CBTExercise exercise, AdminState adminState) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'CBT Exercise Creator',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            
            const SizedBox(height: 16),
            
            Row(
              children: [
                Expanded(
                  child: TextFormField(
                    initialValue: exercise.title,
                    decoration: const InputDecoration(
                      labelText: 'Exercise Title',
                      border: OutlineInputBorder(),
                    ),
                    onChanged: (value) {
                      adminState.updateCBTExercise(
                        exercise.copyWith(title: value),
                      );
                    },
                  ),
                ),
                
                const SizedBox(width: 16),
                
                Expanded(
                  child: DropdownButtonFormField<CBTExerciseType>(
                    value: exercise.exerciseType,
                    decoration: const InputDecoration(
                      labelText: 'Exercise Type',
                      border: OutlineInputBorder(),
                    ),
                    items: const [
                      DropdownMenuItem(
                        value: CBTExerciseType.innerCriticCut,
                        child: Text('Inner Critic Cut'),
                      ),
                      DropdownMenuItem(
                        value: CBTExerciseType.recastingCall,
                        child: Text('Recasting Call'),
                      ),
                      DropdownMenuItem(
                        value: CBTExerciseType.realityVsEffects,
                        child: Text('Reality vs. Special Effects'),
                      ),
                      DropdownMenuItem(
                        value: CBTExerciseType.directorsCommentary,
                        child: Text('Director\'s Commentary'),
                      ),
                      DropdownMenuItem(
                        value: CBTExerciseType.heroJourney,
                        child: Text('Hero\'s Journey'),
                      ),
                    ],
                    onChanged: (value) {
                      if (value != null) {
                        // Show confirmation dialog if changing exercise type on existing content
                        if (exercise.content.isNotEmpty) {
                          showDialog(
                            context: context,
                            builder: (context) => AlertDialog(
                              title: const Text('Change Exercise Type?'),
                              content: const Text('Changing the exercise type will reset your current content. Continue?'),
                              actions: [
                                TextButton(
                                  onPressed: () => Navigator.of(context).pop(),
                                  child: const Text('Cancel'),
                                ),
                                TextButton(
                                  onPressed: () {
                                    Navigator.of(context).pop();
                                    adminState.initializeCBTExercise(value);
                                  },
                                  child: const Text('Continue'),
                                ),
                              ],
                            ),
                          );
                        } else {
                          adminState.initializeCBTExercise(value);
                        }
                      }
                    },
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            TextFormField(
              initialValue: exercise.description,
              maxLines: 2,
              decoration: const InputDecoration(
                labelText: 'Exercise Description',
                border: OutlineInputBorder(),
              ),
              onChanged: (value) {
                adminState.updateCBTExercise(
                  exercise.copyWith(description: value),
                );
              },
            ),
            
            const SizedBox(height: 16),
            
            Row(
              children: [
                Expanded(
                  child: DropdownButtonFormField<String>(
                    value: exercise.difficulty,
                    decoration: const InputDecoration(
                      labelText: 'Difficulty Level',
                      border: OutlineInputBorder(),
                    ),
                    items: const [
                      DropdownMenuItem(value: 'easy', child: Text('Easy')),
                      DropdownMenuItem(value: 'medium', child: Text('Medium')),
                      DropdownMenuItem(value: 'hard', child: Text('Hard')),
                    ],
                    onChanged: (value) {
                      if (value != null) {
                        adminState.updateCBTExercise(
                          exercise.copyWith