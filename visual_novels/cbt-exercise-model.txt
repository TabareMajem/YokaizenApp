import 'package:uuid/uuid.dart';

enum CBTExerciseType {
  innerCriticCut,      // Film genre perspective on inner critic
  recastingCall,       // Role exploration for social situations
  realityVsEffects,    // Fact vs. interpretation sorting
  directorsCommentary, // Self-talk reframing
  heroJourney,         // Personal challenge mapping
}

class CBTExercise {
  final String id;
  final String title;
  final String description;
  final CBTExerciseType exerciseType;
  final String difficulty;
  final int estimatedDuration; // in minutes
  final String targetSkill;
  
  // Exercise content
  final String introduction;
  final List<String> instructions;
  final Map<String, dynamic> content; // Different structure based on exerciseType
  final Map<String, List<String>> feedbackMessages; // success, neutral, try_again
  final Map<String, dynamic> appearance; // theme, colors, etc.
  final List<Stat> stats;
  
  CBTExercise({
    required this.id,
    required this.title,
    required this.description,
    required this.exerciseType,
    required this.difficulty,
    required this.estimatedDuration,
    required this.targetSkill,
    required this.introduction,
    required this.instructions,
    required this.content,
    required this.feedbackMessages,
    required this.appearance,
    required this.stats,
  });
  
  // Create a new exercise with default values
  factory CBTExercise.createDefault(CBTExerciseType type) {
    const uuid = Uuid();
    
    // Set default title based on exercise type
    String title;
    String description;
    
    switch (type) {
      case CBTExerciseType.innerCriticCut:
        title = 'Inner Critic Cut';
        description = 'Identify your inner critic\'s voice through film genres';
        break;
      case CBTExerciseType.recastingCall:
        title = 'Recasting Call';
        description = 'Explore new roles in social situations';
        break;
      case CBTExerciseType.realityVsEffects:
        title = 'Reality vs. Special Effects';
        description = 'Sort facts from interpretations';
        break;
      case CBTExerciseType.directorsCommentary:
        title = 'Director\'s Commentary';
        description = 'Practice different ways to comment on personal experiences';
        break;
      case CBTExerciseType.heroJourney:
        title = 'Hero\'s Journey';
        description = 'Map your challenges to the hero\'s journey structure';
        break;
    }
    
    return CBTExercise(
      id: uuid.v4(),
      title: title,
      description: description,
      exerciseType: type,
      difficulty: 'medium',
      estimatedDuration: 5, // 5 minutes default
      targetSkill: _getDefaultSkill(type),
      introduction: _getDefaultIntroduction(type),
      instructions: _getDefaultInstructions(type),
      content: _getDefaultContent(type),
      feedbackMessages: _getDefaultFeedbackMessages(type),
      appearance: {
        'theme': 'cinema',
        'primaryColor': '#3F51B5',
        'secondaryColor': '#FFC107',
        'backgroundColor': '#FFFFFF',
        'backgroundImage': 'none',
        'animationLevel': 'medium',
      },
      stats: [
        Stat(id: 'awareness', name: 'Self-Awareness', icon: 'visibility', initialValue: 0, maxValue: 100),
        Stat(id: 'perspective', name: 'Perspective', icon: '3d_rotation', initialValue: 0, maxValue: 100),
        Stat(id: 'cognitive_flexibility', name: 'Cognitive Flexibility', icon: 'psychology', initialValue: 0, maxValue: 100),
      ],
    );
  }
  
  // Copy with method for immutability
  CBTExercise copyWith({
    String? id,
    String? title,
    String? description,
    CBTExerciseType? exerciseType,
    String? difficulty,
    int? estimatedDuration,
    String? targetSkill,
    String? introduction,
    List<String>? instructions,
    Map<String, dynamic>? content,
    Map<String, List<String>>? feedbackMessages,
    Map<String, dynamic>? appearance,
    List<Stat>? stats,
  }) {
    return CBTExercise(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      exerciseType: exerciseType ?? this.exerciseType,
      difficulty: difficulty ?? this.difficulty,
      estimatedDuration: estimatedDuration ?? this.estimatedDuration,
      targetSkill: targetSkill ?? this.targetSkill,
      introduction: introduction ?? this.introduction,
      instructions: instructions ?? this.instructions,
      content: content ?? this.content,
      feedbackMessages: feedbackMessages ?? this.feedbackMessages,
      appearance: appearance ?? this.appearance,
      stats: stats ?? this.stats,
    );
  }
  
  // Convert to JSON for storage and API
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'exerciseType': exerciseType.toString().split('.').last,
      'difficulty': difficulty,
      'estimatedDuration': estimatedDuration,
      'targetSkill': targetSkill,
      'introduction': introduction,
      'instructions': instructions,
      'content': content,
      'feedbackMessages': feedbackMessages,
      'appearance': appearance,
      'stats': stats.map((s) => s.toJson()).toList(),
    };
  }
  
  // Create from JSON
  factory CBTExercise.fromJson(Map<String, dynamic> json) {
    return CBTExercise(
      id: json['id'],
      title: json['title'],
      description: json['description'],
      exerciseType: CBTExerciseType.values.firstWhere(
        (e) => e.toString().split('.').last == json['exerciseType'],
        orElse: () => CBTExerciseType.innerCriticCut,
      ),
      difficulty: json['difficulty'],
      estimatedDuration: json['estimatedDuration'],
      targetSkill: json['targetSkill'],
      introduction: json['introduction'],
      instructions: List<String>.from(json['instructions']),
      content: Map<String, dynamic>.from(json['content']),
      feedbackMessages: (json['feedbackMessages'] as Map<String, dynamic>).map(
        (key, value) => MapEntry(key, List<String>.from(value)),
      ),
      appearance: Map<String, dynamic>.from(json['appearance']),
      stats: (json['stats'] as List).map((s) => Stat.fromJson(s)).toList(),
    );
  }
  
  // Helper methods for default exercise configurations
  static String _getDefaultSkill(CBTExerciseType type) {
    switch (type) {
      case CBTExerciseType.innerCriticCut:
        return 'cognitive_restructuring';
      case CBTExerciseType.recastingCall:
        return 'self_awareness';
      case CBTExerciseType.realityVsEffects:
        return 'perspective_taking';
      case CBTExerciseType.directorsCommentary:
        return 'self_compassion';
      case CBTExerciseType.heroJourney:
        return 'resilience';
    }
  }
  
  static String _getDefaultIntroduction(CBTExerciseType type) {
    switch (type) {
      case CBTExerciseType.innerCriticCut:
        return 'We all have an inner critic - that voice in our head that points out our flaws and mistakes. But this voice isn\'t always telling the truth. In this exercise, you\'ll identify what genre of film your inner critic sounds like, helping you recognize that negative self-talk is just one perspective, not objective reality.';
      
      case CBTExerciseType.recastingCall:
        return 'In social situations, we often default to playing certain roles without realizing it. Some of us might cast ourselves as "The Awkward Extra" or "The People-Pleaser." In this exercise, you\'ll explore new roles you can choose to play instead, expanding your social repertoire.';
      
      case CBTExerciseType.realityVsEffects:
        return 'Our minds are constantly adding special effects to reality - interpretations, assumptions, and judgments that go beyond the facts. This exercise helps you distinguish between objective facts and the "special effects" your mind adds to situations.';
      
      case CBTExerciseType.directorsCommentary:
        return 'When we make mistakes or face setbacks, the way we talk to ourselves matters. This exercise helps you practice different ways to "comment" on your experiences - from harsh criticism to compassionate understanding to growth-oriented perspective.';
      
      case CBTExerciseType.heroJourney:
        return 'Every hero in every story faces obstacles and setbacks. This exercise helps you map your personal challenges to the classic hero\'s journey structure, helping you see obstacles as natural parts of your growth story rather than permanent failures.';
    }
  }
  
  static List<String> _getDefaultInstructions(CBTExerciseType type) {
    switch (type) {
      case CBTExerciseType.innerCriticCut:
        return [
          'Read the examples of negative self-talk in each film genre.',
          'Identify which genre sounds most like your own inner critic.',
          'Reflect on how this perspective is just one way of viewing the situation, not objective truth.',
          'Practice creating a more balanced perspective, as if you were the director choosing a different genre for your story.'
        ];
      
      case CBTExerciseType.recastingCall:
        return [
          'Identify a social situation where you feel uncomfortable or stuck in a particular role.',
          'Review the alternative roles you could play in this situation.',
          'Choose a new role that feels authentic but more helpful for you.',
          'Practice stepping into this new role through visualization or role-play.'
        ];
      
      case CBTExerciseType.realityVsEffects:
        return [
          'Review the statements presented in the exercise.',
          'Sort each statement into either "Facts" or "Special Effects" (interpretations).',
          'For statements identified as "Special Effects," try to extract just the factual component.',
          'Reflect on how recognizing the difference helps you respond more skillfully to situations.'
        ];
      
      case CBTExerciseType.directorsCommentary:
        return [
          'Think of a recent mistake or setback you experienced.',
          'Review the different types of "commentary" you could apply to this situation.',
          'Practice shifting from harsh criticism to more balanced and compassionate perspectives.',
          'Choose a commentary style that helps you learn and grow from the experience.'
        ];
      
      case CBTExerciseType.heroJourney:
        return [
          'Identify a personal challenge or obstacle you\'re facing.',
          'Map this challenge to the stages of the hero\'s journey.',
          'Recognize that obstacles and setbacks are natural parts of any meaningful journey.',
          'Identify the potential for growth and transformation in your current challenge.'
        ];
    }
  }
  
  static Map<String, dynamic> _getDefaultContent(CBTExerciseType type) {
    switch (type) {
      case CBTExerciseType.innerCriticCut:
        return {
          'horror': [
            'You\'re going to fail completely and everyone will see what a fraud you are.',
            'This is going to be a total disaster and you\'ll never recover from it.',
            'Everyone is judging you and thinking how pathetic you are.'
          ],
          'documentary': [
            'Statistically speaking, you perform below average in these situations.',
            'Analysis of your past performance indicates a high likelihood of failure.',
            'The evidence suggests you lack the necessary skills for this task.'
          ],
          'comedy': [
            'Of course you messed up again. Classic you, always the joke!',
            'Watch out everyone, the walking disaster has entered the room!',
            'If they gave out awards for awkwardness, you\'d be a legend.'
          ],
        };
      
      case CBTExerciseType.recastingCall:
        return {
          'default_roles': [
            'The Awkward Extra',
            'The People-Pleaser',
            'The Wallflower',
            'The Perfectionist'
          ],
          'alternative_roles': [
            'The Curious Interviewer',
            'The Authentic Character',
            'The Supportive Ally',
            'The Growth-Oriented Learner'
          ],
          'scenarios': [
            'A social gathering where you don\'t know many people',
            'A team meeting at work or school',
            'A difficult conversation with someone close to you',
            'A situation where you\'ve made a mistake'
          ],
        };
      
      case CBTExerciseType.realityVsEffects:
        return {
          'facts': [
            'I didn\'t get the job I applied for.',
            'My friend didn\'t respond to my text for two days.',
            'I made three mistakes during my presentation.',
            'I got a lower grade than I expected on the test.'
          ],
          'interpretations': [
            'I\'ll never find a good job because I\'m unqualified.',
            'My friend is mad at me and doesn\'t want to talk to me anymore.',
            'My presentation was a complete disaster and everyone thought I was incompetent.',
            'I\'m not smart enough for this class and I\'ll probably fail.'
          ],
        };
      
      case CBTExerciseType.directorsCommentary:
        return {
          'harsh_critic': [
            'This just proves how incompetent you are. You should be ashamed.',
            'You always mess things up. This is just who you are.',
            'There\'s no point in trying again because you\'ll just fail.'
          ],
          'compassionate_friend': [
            'Everyone makes mistakes sometimes. This doesn\'t define you.',
            'You\'re being really hard on yourself. Would you talk to a friend this way?',
            'This was difficult, and you\'re doing the best you can with what you know.'
          ],
          'growth_coach': [
            'What can you learn from this experience to do better next time?',
            'This setback is giving you valuable information for your next attempt.',
            'Every expert was once a beginner who made mistakes and learned from them.'
          ],
        };
      
      case CBTExerciseType.heroJourney:
        return {
          'ordinary_world': 'The comfortable situation before your challenge began',
          'call_to_adventure': 'The moment when the challenge or opportunity presented itself',
          'refusal_of_call': 'Initial resistance or fear about facing the challenge',
          'meeting_mentor': 'Finding guidance, support, or resources to help you',
          'crossing_threshold': 'Taking the first steps to address the challenge',
          'tests_allies_enemies': 'Obstacles faced and support discovered along the way',
          'approach': 'Preparing for a major challenge or moment of truth',
          'ordeal': 'The central challenge or difficulty that must be overcome',
          'reward': 'What you gain from facing the challenge (skills, insights, etc.)',
          'road_back': 'Beginning to apply what you\'ve learned',
          'resurrection': 'A final test that confirms your growth',
          'return_with_elixir': 'How you and others benefit from your journey',
        };
    }
  }
  
  static Map<String, List<String>> _getDefaultFeedbackMessages(CBTExerciseType type) {
    switch (type) {
      case CBTExerciseType.innerCriticCut:
        return {
          'success': [
            'Great job identifying your inner critic\'s "genre"! Recognizing the pattern in your negative thoughts is the first step to changing them.',
            'Excellent work! By seeing your inner critic as just one perspective, you\'ve created distance from these thoughts.',
          ],
          'neutral': [
            'You\'ve made a good start recognizing your inner critic. With practice, you\'ll get better at seeing these thoughts as just one perspective, not facts.',
            'You\'re on the right track. Remember that your inner critic is just one voice - and often not a very accurate one!',
          ],
          'try_again': [
            'It can be challenging to identify patterns in our negative thinking. Take your time and try again.',
            'Remember, the goal is to recognize that your inner critic has a particular "style" - try to listen for the patterns in your negative thoughts.',
          ],
        };
      
      case CBTExerciseType.recastingCall:
        return {
          'success': [
            'Excellent role selection! By consciously choosing a new role, you open up new possibilities in social situations.',
            'Great choice! This new role feels both authentic to who you are and helpful for your growth.',
          ],
          'neutral': [
            'You\'re making progress in exploring new social roles. With practice, these new approaches will feel more natural.',
            'Good start! Remember that trying new roles might feel awkward at first, but that\'s part of the growth process.',
          ],
          'try_again': [
            'Finding a role that feels both authentic and helpful can be challenging. Take some time to reflect and try again.',
            'It takes courage to step out of familiar roles. Consider which new role might feel most comfortable to try first.',
          ],
        };
      
      case CBTExerciseType.realityVsEffects:
        return {
          'success': [
            'Excellent job distinguishing facts from interpretations! This skill will help you respond more effectively to challenging situations.',
            'Great work! Recognizing the difference between what happened and the story we tell ourselves about it is a powerful cognitive skill.',
          ],
          'neutral': [
            'You\'re making progress in separating facts from interpretations. This gets easier with practice.',
            'You\'re on the right track. Remember that facts are observable by anyone, while interpretations involve personal judgment.',
          ],
          'try_again': [
            'Separating facts from interpretations can be tricky. Look for observable details versus subjective judgments and try again.',
            'It\'s challenging to spot our mind\'s "special effects." Take another look at which statements could be verified objectively.',
          ],
        };
      
      case CBTExerciseType.directorsCommentary:
        return {
          'success': [
            'Excellent shift in perspective! The way you talk to yourself about challenges has a huge impact on your resilience and growth.',
            'Great work choosing a more balanced and constructive commentary. This approach supports learning while maintaining self-compassion.',
          ],
          'neutral': [
            'You\'re making progress in shifting your self-talk. With practice, more balanced perspectives will come more naturally.',
            'Good start! Remember that the goal isn\'t positive thinking, but rather more balanced and constructive thinking.',
          ],
          'try_again': [
            'Finding a balanced way to talk to yourself can be challenging. Consider what you might say to a friend in this situation and try again.',
            'It takes practice to shift our habitual self-talk. Take your time and experiment with different perspectives.',
          ],
        };
      
      case CBTExerciseType.heroJourney:
        return {
          'success': [
            'Excellent job mapping your challenge to the hero\'s journey! This perspective helps normalize obstacles as part of any meaningful growth.',
            'Great work! Seeing yourself as the hero of your own story empowers you to face challenges with courage and purpose.',
          ],
          'neutral': [
            'You\'re making progress in viewing your challenge through the hero\'s journey lens. This perspective gets more natural with practice.',
            'Good start! Remember that every hero faces setbacks - they\'re not signs of failure but necessary parts of the journey.',
          ],
          'try_again': [
            'Mapping personal challenges to the hero\'s journey takes reflection. Take your time to consider each stage and try again.',
            'It can be difficult to see our struggles as part of a meaningful journey. Consider which stage resonates most with your current situation.',
          ],
        };
    }
  }
}

class Stat {
  final String id;
  final String name;
  final String icon;
  final int initialValue;
  final int maxValue;
  
  Stat({
    required this.id,
    required this.name,
    required this.icon,
    required this.initialValue,
    required this.maxValue,
  });
  
  // Copy with method for immutability
  Stat copyWith({
    String? id,
    String? name,
    String? icon,
    int? initialValue,
    int? maxValue,
  }) {
    return Stat(
      id: id ?? this.id,
      name: name ?? this.name,
      icon: icon ?? this.icon,
      initialValue: initialValue ?? this.initialValue,
      maxValue: maxValue ?? this.maxValue,
    );
  }
  
  // Convert to JSON for storage and API
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'icon': icon,
      'initialValue': initialValue,
      'maxValue': maxValue,
    };
  }
  
  // Create from JSON
  factory Stat.fromJson(Map<String, dynamic> json) {
    return Stat(
      id: json['id'],
      name: json['name'],
      icon: json['icon'],
      initialValue: json['initialValue'],
      maxValue: json['maxValue'],
    );
  }
}